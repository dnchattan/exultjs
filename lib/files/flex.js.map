{"version":3,"sources":["../src/files/flex.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,oDAAuF;AAEvF,qCAA0D;AAC1D,+BAAgC;AAGhC,iCAA2C;AAE3C,IAAK,WAGJ;AAHD,WAAK,WAAW;IACZ,6CAAQ,CAAA;IACR,qDAAY,CAAA;AAChB,CAAC,EAHI,WAAW,KAAX,WAAW,QAGf;AAED,IAAM,iBAAiB,GAAG,UAAU,CAAC;AAUrC;IAA0B,wBAAM;IAgB5B,cAAY,IAAe;eACvB,kBAAM,IAAI,CAAC;IACf,CAAC;IAjBc,eAAU,GAAzB,UAA0B,IAAiB;QACvC,MAAM,CAAC;YACH,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAC1B,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE;YACpB,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;YACnB,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE;YACpB,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SAC5B,CAAC;IACN,CAAC;IAWM,mBAAI,GAAX,UAAY,KAAa,EAAE,IAAY;QACnC,IAAM,GAAG,GAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAES,oBAAK,GAAf;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,MAAM,IAAI,gCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,sCAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACtE,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;gBACjB,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACzB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;aAC1B,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IACL,WAAC;AAAD,CA/CA,AA+CC,CA/CyB,aAAM,GA+C/B;AA/CY,oBAAI;AAiDjB;IAA8B,4BAAI;IAC9B,kBAAY,UAAqB;QAAjC,YACI,kBAAM,UAAU,CAAC,SAKpB;QAJG,EAAE,CAAC,CAAC,gBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,KAAI,CAAC,IAAI,GAAG,IAAI,0BAAgB,CAAC,cAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1D,KAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;IACL,CAAC;IACL,eAAC;AAAD,CARA,AAQC,CAR6B,IAAI,GAQjC;AARY,4BAAQ","file":"files/flex.js","sourcesContent":["import { Readable } from 'stream';\r\nimport { file_read_exception, wrong_file_type_exception } from '../include/exceptions';\r\nimport { IReference, uint32 } from '../include/types';\r\nimport { BufferDataSource, IDataSource } from './databuf';\r\nimport { U7File } from './file';\r\nimport { IFileSpec } from './object';\r\nimport { applyMixins } from './utils';\r\nimport { U7Exists, U7Open } from './utils';\r\n\r\nenum FlexVersion {\r\n    orig = 0,       ///<    Original file version.\r\n    exult_v2 = 1,   ///<    Exult extension for IFIX objects.\r\n}\r\n\r\nconst EXULT_FLEX_MAGIC2 = 0x0000cc00;\r\n\r\ninterface IFlexHeader {\r\n    title: string;  // 50 characters (optional, filled with 00s)\r\n    magic1: uint32; // seems to be always $FFFF1A00\r\n    count: uint32;  // number of object in table, including empty objects\r\n    magic2: uint32; // seems to be always $000000CC\r\n    padding?: any;  // often set to 0, but sometimes used, meaning?\r\n}\r\n\r\nexport class Flex extends U7File {\r\n    private static readHeader(data: IDataSource): IFlexHeader {\r\n        return {\r\n            title: data.readString(80),\r\n            magic1: data.read4(),\r\n            count: data.read4(),\r\n            magic2: data.read4(),\r\n            padding: data.skip(4 * 9),\r\n        };\r\n    }\r\n\r\n    public count: number;\r\n    public type: 'FLEX';\r\n    private header: IFlexHeader;\r\n    private objectList: IReference[];\r\n\r\n    constructor(spec: IFileSpec) {\r\n        super(spec);\r\n    }\r\n\r\n    public read(index: number, size: number): Buffer {\r\n        const ref: IReference = this.objectList[index];\r\n        if (!ref) {\r\n            return new Buffer('');\r\n        }\r\n        this.data.seek(ref.offset);\r\n        return this.data.read(ref.size);\r\n    }\r\n\r\n    protected index(): void {\r\n        if (!this.data) {\r\n            throw new file_read_exception(this.identifier.name);\r\n        }\r\n\r\n        this.header = Flex.readHeader(this.data);\r\n        if (this.header.magic1 !== 0xffff1a00) {\r\n            throw new wrong_file_type_exception(this.identifier.name, 'FLEX');\r\n        }\r\n        this.data.seek(128);\r\n        this.objectList = [];\r\n        for (let c = 0; c < this.header.count; c++) {\r\n            this.objectList.push({\r\n                offset: this.data.read4(),\r\n                size: this.data.read4(),\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport class FlexFile extends Flex {\r\n    constructor(identifier: IFileSpec) {\r\n        super(identifier);\r\n        if (U7Exists(identifier.name)) {\r\n            this.data = new BufferDataSource(U7Open(identifier.name));\r\n            this.index();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}